---
title: "Collections Overview"
author: "Fred Agbo"
date: August 27, 2025
format:
  revealjs:
    # css: minimal.css
    chalkboard: true
    slide-number: true
    theme: [simple, night]
    respect-user-color-scheme: true
    width: 1400
---

## Announcements
- Welcome to the class
- Report any issues with practicing PS0 assignment
- If you have not:
    - Read over the full syllabus carefully
    - [Join](https://discord.gg/AnCB5NEpfw) the class communication/announcements on  ***Discord Server***.!
    
## Built-In Python Collections and Their Operations
- Modern programming languages include several types of collections
- They allow the programmer to organize and manipulate several data values at once
- This section explores the built-in collections in Python

## Built-In Python Collection `List`

- A sequence of zero or more Python objects
- Commonly called items
- Has a literal representation
- Uses square brackets `[]`to enclose items separated by commas
- Ordered, mutable collection.
    -  Example: ``
    ```{.python}
    []	                      # An empty list
    ["greater"]	            # A list of one string
    ["greater", "less"]	  # A list of two strings
    ["greater", "less", 10]	  # A list of two strings and an int
    ["greater", ["less", 10]]  # A list with a nested list
    my_list = [1, 2, 3] # A list of interger numbers 
    
    ```
- Operations: append, remove, indexing, slicing.

## Built-In Python Collection `Tuple`
- Ordered, immutable collection.
    - Example: `my_tuple = (1, 2, 3)`
    - Operations: indexing, slicing.

    - **Set**: Unordered, mutable collection of unique elements.
        - Example: `my_set = {1, 2, 3}`
        - Operations: add, remove, union, intersection.

    - **Dictionary**: Unordered, mutable collection of key-value pairs.
        - Example: `my_dict = {'a': 1, 'b': 2}`
        - Operations: access by key, update, keys(), values().