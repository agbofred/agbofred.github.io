---
title: "CS 152 Kickoff & Course Overview"
author: "Fred Agbo"
date: August 25, 2025
format:
  revealjs:
    css: minimal.css
    chalkboard: true
    slide-number: true
---

## Announcements
- Welcome to CS152: Data Structure
- Things to do:
    - Access the course webpage on Canvas and read over the full syllabus carefully
    - Class communication/announcements: on Canvas & ***Discord Server***. [Join](https://discord.gg/AnCB5NEpfw) now!

# Introduction

Let's get to know one another...

## My Vitals

::: layout-columns
::: column
<span class="brighter-text">
**Name:** Professor/Dr Fred Agbo  <br>
**Office:** Ford 209  <br>
__Office Hours:__ T, TH 10:30-12:00pm Online or anytime I'm around  <br>
**Email:** fjagbo at willamette.edu  <br>
__Office Phone:__ 503-370-6862
</span>
:::
::: column
![](../../images/fredprofile.jpg){width=70%}
:::
:::

# Syllabus Check


## Grading

::: {.columns}
::: {.column}
- Standard 90/80/70 etc grade cut-offs
    - Top 2% get +'s
    - Bottom 2% get -'s
:::

::: {.column}
------------------ --------------------
Participation              		5%
5 Problem Sets          			20%
4 Defined-Projects 				20%
1 Personal-Project 				15%
2 Midterms              			20%
A Final Exam            			20%
----------------- --------------------
:::
:::

## Homework
- Falls into two categories:
    - _Problem Sets:_ smaller, more focused assignments
        - Graded on standard, numeric scales
    - _Projects_: larger, more integrative assignments
        - Graded on a more qualitative scale (next slide)
- All will be due on Mondays at 10:00pm
- Submissions of _both_ will be handled through Github Classroom
    - Learn how to do this from Jed's __videos__. Or meet me during my office hours if something is not working as expected!
- *3 cumulative late days (24 hours max) over the entire semester without penalty* then penalties enacted for each subsequent day late.
- Extensions for any reason need to be requested and approved by myself before the due date

---

## Why Studying Data Structures Matters

- Data structures are fundamental to efficient problem solving in computer science
- They help organize, manage, and store data for optimal access and modification
- Choosing the right data structure can dramatically improve program performance
- Many real-world applications (search engines, databases, games) rely on effective use of data structures
- Understanding data structures prepares you for technical interviews and advanced coursework

## Why Studying Data Strecture
- Data Structures often provide a model of the real-world problem they help solve
-  Examples:
    - People waiting in line to buy tickets
    -  Issuing lottery tickets then picking and finding the winner
    - Maintaining a group of contacts with changing attributes like phone numbers, app handles, residences, and even names
    - Tracking stars, asteroids, comets, and other phenomena in space and updating them as more is learned about them
    - The data structure must make the most common operations efficient for that problem domain


## What is a Data Structure?

- A data structure is a representation of the logical relationship existing among elements of data.
- It provides a way to organize, store, and manage data efficiently.
- Examples include __arrays__, ***linked lists***, **stacks**, __queues__, **trees**, and ***graphs***.
- The choice of data structure impacts how you access, modify, and process data in your programs.


## Primitive and Non-Primitive Data Structures

- Primitive Data Structures
    - Directly operated upon by machine instructions
    - Examples: `int`, `float`, `char`, `boolean`
    - Simple, single-value containers

- Non-Primitive Data Structures
    - Built using primitive data types
    - Can store multiple values and complex relationships
    - Examples: `arrays`, `lists`, `stacks`, `queues`, `trees`, `graphs`
    - Enable efficient data organization and manipulation

## Non-Primitive Data Structure
::: layout-columns
::: column
-   Arrays
    - Single Dimension Arrays
        - Store elements in a linear sequence
        - Example in Python:
        ```python
        numbers = [10, 20, 30, 40, 50]
        ```
    - Multi-Dimensional Arrays
        - Store elements in a grid or matrix (e.g., 2D, 3D)
        - Example in Python (2D array):
        ```python
        matrix = [[1, 2], [3, 4], [5, 6]]
        ```
:::
::: column
-   Lists
    - Linear 
        - Stack
        - Queue 
        - Linked List
    - None Linear 
        - Trees
        - Graphs 

:::
:::

## The Four Primary Operations

- Insertion: 
    - Add a new element to the data structure.
- Deletion: 
    - Remove an existing element from the data structure.
- Traversal: 
    - Access each element of the data structure systematically.
- Searching: 
    - Find the location of a specific element within the data structure.
- These operations are fundamental to working with any data structure and their efficiency depends on the type of structure used.

## So Many Data Structures: Why Care?
- Different data structures excel at different things.  
    - Some are highly specialized, while others (like arrays) are more generally used.
- The more time you spend as a developer, the more likely you'll need to use one of these data structures
- You've already worked with many of them knowingly or unknowingly ðŸ¤“
- _Job interviews_ often include data structure questions. 
    - For example, you might be asked to implement a stack or explain when to use a hash table. 
    - Knowing the strengths and weaknesses of each data structure helps you solve these problems efficiently and impress interviewers.

# THERE IS NO ONE "BEST" DATA STRUCTURE
ðŸ˜Ž


## Data Structure Selection Cheat Sheet

| Data Structure | Best For | Example Use Case |
|:-------------- |:---------|:----------------|
| Array          | Fast access by index, fixed size | Storing scores, pixel data |
| Linked List    | Frequent insertions/deletions | Undo history, playlist |
| Stack          | Last-in, first-out (LIFO) | Function calls, browser history |
| Queue          | First-in, first-out (FIFO) | Print jobs, task scheduling |
| Tree           | Hierarchical data | File systems, organization charts |
| Graph          | Relationships/networks | Social networks, maps |

_Choose based on your problem's needs: speed, memory, and operations!_

## Important Functions in `random`

:::{style='font-size: 80%'}

- Random Integers

|                          |                                                             |
| :---                     | :------                                                     |
| `randint(minv, maxv)`    | Returns an integer between minv and maxv, inclusive         |
| `randrange(limit)`       | Returns an integer from 0 up to but not including limit     |
| `randrange(start,limit)` | Returns an integer from start up to but not including limit |
| `random()`            | Returns a random float between 0 and 1       |
| `uniform(minv, maxv)` | Returns a random float between minv and maxv |
| `choice(a_list)`    | Returns a random element from `a_list`       |
| `sample(a_list, k)` | Returns a list of `k` elements from `a_list` |
| `shuffle(a_list)`   | Randomly reorders the elements of `a_list`   |

:::

## Random Examples
```{.python style='min-height:300px; font-size:34px'}
import random

def random_redblue():
    if random.random() > 0.5:
        return "red"
    else:
        return "blue"

def random_color():
    color_string = "#"
    for i in range(6):
        color_string += random.choice("0123456789ABCDEF")
    return color
```

## The Portable Graphics Library
- Built atop Tkinter
- The library (`pgl.py`) is available on the Canvas website [here](https://willamette.instructure.com/courses/3703/modules/items/160252)
    - Put it in the same folder as your code, and then you can import it
- Operates on the idea of a collage or cork-board

[Test](../images/CorkBoard.svg)

- Note that newer objects can obscure older objects. This layering arrangement is called the _stacking order_.


## The Pieces
- At its simplest then, we have two main parts:
    - The window (or felt-board/cork-board)
        - Created with the `GWindow` function
        - Takes two arguments: a width and a height in pixels
    - The contents
        - A wide assortment of shapes and lines that can be added to the scene
        - Control over where they are placed, how large they are, what color they are, etc


## Blue Rectangle!
```{.python data-line-numbers="1|3,4|6|7|8|9|10|11" style="font-size:34px;"}
from pgl import GWindow, GRect

GW_WIDTH = 500
GW_HEIGHT = 200

gw = GWindow(GW_WIDTH, GW_HEIGHT)
rect = GRect(150, 50 ,200, 100)
rect.set_color("Blue")
rect.set_filled(True)
gw.add(rect)
```

