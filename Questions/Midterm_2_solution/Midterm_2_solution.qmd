---
title: "Midterm-2 Review"
subtitle: "2023"
format:
  html:
    theme:
      light: 
        - cosmo
        - ../projects_light.scss
      dark: 
        - darkly
        - ../projects_dark.scss
    smooth-scroll: true
    fontsize: 1.2em
    highlight-style: atom-one
    toc: true
    toc-depth: 2
    html-math-method: katex
    embed-resources: true
    title-block-banner: ./Images/banner.png
    title-block-banner-color: black
---
## Questions 1a-1d
For each of the below questions (1a - 1d), write out the value or the expression in the box provided. If the expression results in an error, simply type "Error" in the box.


(1a).    Given the program 
```python
def func_1(x,y):
    return z + func_2(x,y)
def func_2(x,y=1):
    def func_3(k):
        return (y + k) ** 2
    z = x - func_3(y)
    return z - y
z = 1
print(func_1(func_2(4),z))
```
What will be the value printed to the terminal after the program execute?<br>
`ANS: -5`

(1b).    In Python, you can pass a function as a parameter to some other function. Write out the line in question 1(a) that exhibits this characteristic <br>

`ANS: print(func_1(func_2(4),z))`



(1c).  Given the program 

```python
def puzzle(t):
    def mystery(r,x):
        x+=2
        def enigma(s=0):
            return r[s::x]
        return enigma
    x=1
    y= mystery(t,x=x)
    return y(x)+ y() + y(s=8)
print(puzzle("phsyahdpya"))
```
What will be printed to the screen after the program execute? 

`ANS: happyday`

(1d).  Functions in Python are said to be first-class functions where you can assign them to a variable, pass it as a parameter, or return it as a result. From question 1(c), which line(s) of code depicts an example of this behavior?

`One ANS: y= mystery(t,x=x)` <br>
`Another ANS: return y(x)+ y() + y(s=8)`

# Questions 2a
(2a). Write a function `string_summary` that receives a string and return a list of tuples containing the unique letters and their frequencies in the string. Display the list to the terminal by showing each letter with its frequency as shown below. Your function should ignore case sensitivity (that is, 'a' and 'A' are the same) and should also ignore white spaces.
For example, if `mystring = 'Today is midterm test'`
then `string_summary(mystring)` will display:
```python
# a: 1
# d: 2
# e: 2
# i: 2
# m: 2
# o: 1
# r: 1
# s: 2
# t: 4
# y: 1
```



``` python
#One way I solve the problem of Q2A is below
ALPHABET = 'abcdefghijklmnopqrstuvwxyz'

def summarize_letters(string):
    letters = []
    counts = []
    
    for letter in string.lower():
        if letter in ALPHABET:
            if letter in letters:
                index = letters.index(letter)
                counts[index] += 1
            else:
                letters.append(letter)
                counts.append(1)
           
    tuples = list(zip(letters, counts))
    tuples.sort()
    return tuples

mystring = 'Today is midterm test'
summary = summarize_letters(mystring)

# display counts
for char, count in summary:
    print(f'{char}: {count}')
```

## Question 2b
(2b). Write a python program that insert 20 random letters in the range 'a' through 'f' into a list. Perform the following tasks on the list and display your results.
- i. Sort the list in ascending order
- ii. Sort the list in descending order
- iii. Get the unique values and sort them in an ascending order

Hints: 
1. Assume that class random is imported into the program
2. You can generate the list of random letters by writing a comprehension, <br> for example: 
`random_letters = [random.choice('abcdef') for i in range(20)]`

```python
# One sample solution to question 2B is below
import random

#Generate list 
random_letters = [random.choice('abcdef') for i in range(20)]

print("Original list:", random_letters)

#First step
ascending_order = sorted(random_letters)
print("Ascending order:", ascending_order)

#Second step
descending_order = sorted(random_letters, reverse=True)
print("Descending order:", descending_order)

#Third step
unique_values = []
for i in random_letters:
    if i not in unique_values:
        unique_values.append(i)
    unique_values.sort()
#unique_values = sorted(set(random_letters))
print("Unique values in ascending order:", unique_values)

```

## Question 3
(3).  Write Python program that uses the PGL library to achieve the following:
- i. Draw an 8X8 checkerboard to the center of the canvas.
- ii. Add a caption or label directly below the checkerboard
Note:
1. You should assume that all the necessary PGL library for this program have been imported.
2. The checkerboard and its label are placed at the center of the canvas.
3. You are free to choose any color aside from the black and while as shown in an example below.
4. Although you are unable to test the program to confirm everything works as expected, you can attempt the question since every correct step could earn you points.
 
![](./image.png)

```python
# Here is my version of the solution
from pgl import GWindow, GRect, GLabel, GCompound
GWidth= 500
Gheight = 500

def create_board():
    b = GCompound()
    for c in range(0,8):
        for r in range(0,8):
            rect = GRect(30*c,30*r,30,30)
            if (r+c) % 2 != 0:
                rect.set_filled(True) 
            b.add(rect)
    return b

gw = GWindow(GWidth,Gheight)
board = create_board()
board.set_location(120, 120)
label = GLabel("An 8X8 checkerboard designed by Fred!")
label.set_font("14px 'Times New Roman'")
x = (gw.get_width() - label.get_width()) / 2
y = (board.get_height() + gw.get_height() + label.get_ascent()) / 2

gw.add(board)
gw.add(label, x,y)
```